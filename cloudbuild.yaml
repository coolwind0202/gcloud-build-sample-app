steps:
- name: 'gcr.io/cloud-builders/docker'
  script: |
    docker build -t asia-northeast1-docker.pkg.dev/$PROJECT_ID/$_REGISTRY_REPOSITORY/app:$COMMIT_SHA .

# 検知できるすべてのコンテナイメージ脆弱性を JSON でファイルに保存する
- name: 'gcr.io/$PROJECT_ID/trivy'
  args: [
    'image',
    '-f', 'json',
    '-o', 'trivy-all-$COMMIT_SHA.json',
    'asia-northeast1-docker.pkg.dev/$PROJECT_ID/$_REGISTRY_REPOSITORY/app:$COMMIT_SHA'
  ]

# 重大かつ修正パッチが存在する脆弱性を検出した場合はパイプラインを終了する
- name: 'gcr.io/$PROJECT_ID/trivy'
  args: [
    'image',
    '--severity', 'HIGH,CRITICAL',
    '--ignore-unfixed',
    '--exit-code', '1',
    'asia-northeast1-docker.pkg.dev/$PROJECT_ID/$_REGISTRY_REPOSITORY/app:$COMMIT_SHA'
  ]

# Banditによる検査
- name: 'gcr.io/$PROJECT_ID/bandit'
  args: ['-r', '.']

# Artifact Registryへのpush
- id: 'publish'
  name: 'gcr.io/cloud-builders/docker'
  args: [
    'push',
    'asia-northeast1-docker.pkg.dev/$PROJECT_ID/$_REGISTRY_REPOSITORY/app:$COMMIT_SHA'
  ]

# 証明書の作成
- id: 'create-attestation'
  name: 'gcr.io/$PROJECT_ID/binauthz-attestation:latest'
  args: [
    '--artifact-url',
    'asia-northeast1-docker.pkg.dev/$PROJECT_ID/$_REGISTRY_REPOSITORY/app:$COMMIT_SHA',
    '--attestor',
    'projects/$PROJECT_ID/attestors/$_ATTESTOR',
    '--keyversion',
    'projects/sreake-intern/locations/asia-northeast1/keyRings/$_KEY_RING/cryptoKeys/$_KEY/cryptoKeyVersions/$_KEY_VERSION'
  ]

artifacts:
  objects:
    location: 'gs://$_BUCKET/'
    paths: ['trivy-all-$COMMIT_SHA.json']

substitutions:
  _REGISTRY_REPOSITORY: repo-summer-2024-k-takahashi
  _BUCKET: sreake-summer-intern-2024-erable
  _ATTESTOR: attestor-k-takahashi
  _KEY_RING: cloud-build-k-takahashi
  _KEY: for-cloud-build
  _KEY_VERSION: '1'
options:
  automapSubstitutions: true
